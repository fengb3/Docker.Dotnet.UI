@page "/containers"
@using Docker.DotNet
@using Docker.DotNet.Models
@using Docker.Dotnet.UI.ViewModels
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

@inherits MyComponentBase<Docker.Dotnet.UI.ViewModels.ContainersPageViewModel>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">Docker Containers</MudText>
    
    @if (Vm?.Containers == null || Vm.Containers.Count == 0)
    {
        <MudAlert Severity="Severity.Info">暂无容器</MudAlert>
    }
    else
    {
        <MudPaper Class="pa-3 mb-3" Elevation="0" >
            <MudGrid Spacing="2">
                <MudItem xs="1" Class="d-flex align-center">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">状态</MudText>
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>  
                <MudItem xs="2" Class="d-flex align-center">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">容器名称</MudText>
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>
                <MudItem xs="2" Class="d-flex align-center">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">镜像</MudText>
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>
                <MudItem xs="1" Class="d-flex align-center">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">容器 ID</MudText>
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>
                <MudItem xs="2" Class="d-flex align-center">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">端口映射</MudText>
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>
                <MudItem xs="1" Class="d-flex align-center">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">创建时间</MudText>
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>
                <MudItem xs="3" Class="d-flex align-center justify-end pr-8">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">操作</MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>
        
        <MudStack Spacing="2">
            @foreach (var container in Vm.Containers)
            {
                <MudCard Class="pa-3">
                    <MudGrid Spacing="2">
                        <MudItem xs="1" Class="d-flex align-center">
                            <MudChip T="string" Color="container.StateColor" Size="Size.Small">
                                @container.State
                            </MudChip>
                        </MudItem>
                        
                        <MudItem xs="2" Class="d-flex align-center">
                            <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                @container.ContainerName
                            </MudText>
                        </MudItem>
                        
                        <MudItem xs="2" Class="d-flex align-center">
                            <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                @container.Image
                            </MudText>
                        </MudItem>
                        
                        <MudItem xs="1" Class="d-flex align-center">
                            <MudText Typo="Typo.body2">@container.ShortId</MudText>
                        </MudItem>
                        
                        <MudItem xs="2" Class="d-flex align-center">
                            @if (container.Ports != null && container.Ports.Any())
                            {
                                <MudStack Row="true" Spacing="1" Style="overflow: hidden;">
                                    @foreach (var port in container.Ports.Take(2))
                                    {
                                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">
                                            @if (port.PublicPort > 0)
                                            {
                                                <text>@port.PublicPort:@port.PrivatePort</text>
                                            }
                                            else
                                            {
                                                <text>@port.PrivatePort</text>
                                            }
                                        </MudChip>
                                    }
                                    @if (container.Ports.Count > 2)
                                    {
                                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">+@(container.Ports.Count - 2)</MudChip>
                                    }
                                </MudStack>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Color="Color.Secondary">-</MudText>
                            }
                        </MudItem>
                        
                        <MudItem xs="1" Class="d-flex align-center">
                            <MudText Typo="Typo.body2">@container.Created.ToString("MM-dd HH:mm")</MudText>
                        </MudItem>
                        
                        <MudItem xs="3" Class="d-flex align-center justify-end">
                            <MudStack Row="true" Spacing="1">
                                @if (container.State == "running")
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Stop" 
                                                   Color="Color.Warning"
                                                   Size="Size.Small"
                                                   OnClick="@(() => HandleStopContainer(container.ID))"
                                                   title="停止" />
                                }
                                else
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" 
                                                   Color="Color.Success"
                                                   Size="Size.Small"
                                                   OnClick="@(() => HandleStartContainer(container.ID))"
                                                   title="启动" />
                                }
                                
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => HandleDeleteContainer(container.ID))"
                                               title="删除" />
                                
                                <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" 
                                               Color="Color.Primary"
                                               Size="Size.Small"
                                               OnClick="@(() => HandleMoreOptions(container.ID))"
                                               title="更多" />
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudCard>
            }
        </MudStack>
    }
</MudContainer>

@code {
    
    private async Task HandleStartContainer(string containerId)
    {
        await Vm!.StartContainerAsync(containerId);
    }
    
    private async Task HandleStopContainer(string containerId)
    {
        await Vm!.StopContainerAsync(containerId);
    }
    
    private async Task HandleDeleteContainer(string containerId)
    {
        await Vm!.DeleteContainerAsync(containerId);
    }
    
    private void HandleMoreOptions(string containerId)
    {
        // 暂不实现
    }
}
