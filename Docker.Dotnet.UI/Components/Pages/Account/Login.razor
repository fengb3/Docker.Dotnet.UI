@page "/Account/Login"
@using Docker.Dotnet.UI.ViewModels

@inject LoginViewModel ViewModel
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>登录</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="min-height: 100vh;">
    <MudPaper Elevation="3" Class="pa-8 rounded-4" Style="width: 100%; max-width: 400px;">
        <MudStack Spacing="4">
            <MudText Typo="Typo.h4" Align="Align.Center">Docker.Dotnet.UI</MudText>
            <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Secondary">用户登录</MudText>

            @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
            {
                <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="@(() => ViewModel.ErrorMessage = null)">
                    @ViewModel.ErrorMessage
                </MudAlert>
            }

            <EditForm Model="@ViewModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                
                <MudStack Spacing="3">
                    <MudTextField 
                        @bind-Value="ViewModel.Username"
                        Label="用户名" 
                        Variant="Variant.Outlined"
                        For="@(() => ViewModel.Username)"
                        Disabled="ViewModel.IsLoading"
                        T="string" />

                    <MudTextField 
                        @bind-Value="ViewModel.Password"
                        Label="密码" 
                        Variant="Variant.Outlined"
                        InputType="InputType.Password"
                        For="@(() => ViewModel.Password)"
                        Disabled="ViewModel.IsLoading"
                        T="string" />

                    <MudCheckBox 
                        @bind-Value="ViewModel.RememberMe"
                        Label="记住我"
                        Color="Color.Primary"
                        Disabled="ViewModel.IsLoading"
                        T="bool" />

                    <MudButton 
                        ButtonType="ButtonType.Submit"
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        FullWidth="true"
                        Size="Size.Large"
                        Disabled="ViewModel.IsLoading">
                        @if (ViewModel.IsLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">登录中...</MudText>
                        }
                        else
                        {
                            <MudText>登录</MudText>
                        }
                    </MudButton>
                </MudStack>
            </EditForm>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery(Name = "error")]
    public string? ErrorFromQuery { get; set; }

    protected override void OnInitialized()
    {
        // 如果 URL 中有错误参数，显示错误消息
        if (!string.IsNullOrEmpty(ErrorFromQuery))
        {
            ViewModel.SetError(ErrorFromQuery);
        }
    }

    // 通过 JavaScript 提交表单到 /api/login 端点
    private async Task HandleLogin()
    {
        // 设置加载状态
        ViewModel.SetLoading(true);
        
        // 表单验证通过后，使用 JavaScript 提交表单
        // 这会触发完整的 HTTP POST，避免 Blazor Server 的 Cookie 限制
        await JSRuntime.InvokeVoidAsync("submitLoginForm", 
            ViewModel.Username, 
            ViewModel.Password, 
            ViewModel.RememberMe,
            string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl);
    }
}

<script>
    window.submitLoginForm = function(username, password, rememberMe, returnUrl) {
        // 创建隐藏表单
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/api/Account/Login';
        
        // 添加表单字段
        const fields = {
            'username': username,
            'password': password,
            'rememberMe': rememberMe ? 'true' : 'false',
            'returnUrl': returnUrl
        };
        
        for (const [key, value] of Object.entries(fields)) {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = key;
            input.value = value;
            form.appendChild(input);
        }
        
        // 添加到页面并提交
        document.body.appendChild(form);
        form.submit();
    };
</script>

