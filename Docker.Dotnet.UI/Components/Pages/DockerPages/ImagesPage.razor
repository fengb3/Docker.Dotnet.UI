@page "/Images"
@using Docker.DotNet
@using Docker.DotNet.Models
@using Docker.Dotnet.UI.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@implements IDisposable

@inherits MyComponentBase<Docker.Dotnet.UI.ViewModels.ImagesPageViewModel>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
        <MudText Typo="Typo.h4">@Localizer["DOCKER_IMAGES"]</MudText>
        <MudStack Row="true" Spacing="2">
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="Vm!.OpenAddImageDialog">
                @Localizer["ADD_IMAGE"]
            </MudButton>
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Secondary" 
                       StartIcon="@Icons.Material.Filled.Refresh"
                       OnClick="@(() => Vm!.RefreshImagesAsync())">
                @Localizer["REFRESH"]
            </MudButton>
        </MudStack>
    </MudStack>
    
    <!-- Search Bar -->
    <MudPaper Class="pa-3 mb-3" Elevation="1">
        <MudTextField @bind-Value="Vm!.SearchText" 
                      Label="@Localizer["SEARCH"]"
                      Placeholder="@Localizer["SEARCH_PLACEHOLDER"]"
                      Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Immediate="true"
                      OnKeyUp="@(() => Vm.ApplyFilters())"
                      Variant="Variant.Outlined" />
    </MudPaper>

    <!-- Batch Actions Toolbar -->
    @if (Vm.SelectedImageIds.Count > 0)
    {
        <MudPaper Class="pa-3 mb-3" Elevation="2">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.body1">
                    <strong>@Vm.SelectedImageIds.Count</strong> @Localizer["SELECTED_ITEMS"]
                </MudText>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Error" 
                           StartIcon="@Icons.Material.Filled.Delete"
                           OnClick="@(() => ConfirmRemoveSelected())">
                    @Localizer["REMOVE_SELECTED"]
                </MudButton>
            </MudStack>
        </MudPaper>
    }
    
    @if (Vm?.Images == null || Vm.Images.Count == 0)
    {
        <MudAlert Severity="Severity.Info">@Localizer["NO_IMAGES"]</MudAlert>
    }
    else
    {
        <MudPaper Class="pa-3 mb-3" Elevation="0" >
            <MudGrid Spacing="2">
                <MudItem xs="1" Class="d-flex align-center">
                    <MudCheckBox T="bool" Value="@Vm.SelectAll" 
                                 ValueChanged="@((bool val) => Vm!.ToggleSelectAll())" 
                                 Color="Color.Primary" />
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>
                <MudItem xs="1" Class="d-flex align-center">
                    <MudCheckBox T="bool" Value="@Vm.SelectAll" 
                                 ValueChanged="@((bool val) => Vm!.ToggleSelectAll())" 
                                 Color="Color.Primary" />
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>
                <MudItem xs="2" Class="d-flex align-center">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">@Localizer["IMAGE_NAME"]</MudText>
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>  
                <MudItem xs="2" Class="d-flex align-center">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">@Localizer["IMAGE_ID"]</MudText>
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>
                <MudItem xs="2" Class="d-flex align-center">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">@Localizer["SIZE"]</MudText>
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>
                <MudItem xs="2" Class="d-flex align-center">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">@Localizer["CREATED_AT"]</MudText>
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>
                <MudItem xs="1" Class="d-flex align-center">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">@Localizer["CONTAINERS_COUNT"]</MudText>
                    <MudSpacer/>
                    <MudDivider Vertical FlexItem DividerType="DividerType.FullWidth" />
                </MudItem>
                <MudItem xs="2" Class="d-flex align-center justify-end pr-8">
                    <MudText Typo="Typo.subtitle2" Color="Color.Surface">@Localizer["ACTIONS"]</MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>
        
        <MudStack Spacing="2">
            @foreach (var image in Vm.Images)
            {
                <MudCard Class="pa-3">
                    <MudGrid Spacing="2">
                        <MudItem xs="1" Class="d-flex align-center">
                            <MudCheckBox T="bool" 
                                         Value="@Vm.SelectedImageIds.Contains(image.ID)" 
                                         ValueChanged="@((bool val) => Vm!.ToggleImageSelection(image.ID))" 
                                         Color="Color.Primary" />
                        </MudItem>
                        
                        <MudItem xs="2" Class="d-flex align-center">
                            <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                @image.ImageName
                            </MudText>
                        </MudItem>
                        
                        <MudItem xs="2" Class="d-flex align-center">
                            <MudText Typo="Typo.body2">@image.ShortId</MudText>
                        </MudItem>
                        
                        <MudItem xs="2" Class="d-flex align-center">
                            <MudText Typo="Typo.body2">@image.SizeFormatted</MudText>
                        </MudItem>
                        
                        <MudItem xs="2" Class="d-flex align-center">
                            <MudText Typo="Typo.body2">@image.Created.ToString("yyyy-MM-dd HH:mm")</MudText>
                        </MudItem>
                        
                        <MudItem xs="1" Class="d-flex align-center">
                            <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">
                                @image.Containers
                            </MudChip>
                        </MudItem>
                        
                        <MudItem xs="2" Class="d-flex align-center justify-end">
                            <MudStack Row="true" Spacing="1">
                                <MudIconButton Icon="@Icons.Material.Filled.Info" 
                                               Color="Color.Primary"
                                               Size="Size.Small"
                                               OnClick="@(() => Vm.ShowInspectAsync(image.ID, image.ImageName))"
                                               title='@Localizer["INSPECT"]' />
                                
                                <MudIconButton Icon="@Icons.Material.Filled.Download" 
                                               Color="Color.Info"
                                               Size="Size.Small"
                                               OnClick="@(() => Vm.ExportImageAsync(image.ID, image.ImageName))"
                                               Disabled="Vm.IsExporting"
                                               title='@Localizer["EXPORT_IMAGE"]' />
                                
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => Vm.DeleteImageAsync(image.ID))"
                                               title='@Localizer["REMOVE"]' />
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudCard>
            }
        </MudStack>
    }
</MudContainer>

<MudDialog @bind-Visible="Vm!.ShowAddImageDialog" Options="Vm!.DialogOptions">
            <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1" /> @Localizer["ADD_IMAGE"]
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTabs ApplyEffectsToContainer="true" PanelClass="pa-4" Style="min-height: 500px;">
            <MudTabPanel Text="@Localizer["PULL_FROM_REGISTRY"]" Icon="@Icons.Material.Filled.CloudDownload">
                <MudStack Spacing="3">
                    <MudTextField @bind-Value="Vm!.PullImageName"
                                  Label="@Localizer["PULL_IMAGE_NAME_LABEL"]"
                                  Placeholder="@Localizer["PULL_IMAGE_NAME_PLACEHOLDER"]"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  Disabled="Vm.IsPulling" />
                    
                    <MudTextField @bind-Value="Vm.PullImageTag"
                                  Label="@Localizer["TAG"]"
                                  Placeholder="@Localizer["TAG_PLACEHOLDER"]"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  Disabled="Vm.IsPulling" />
                    
                    <MudPaper Class="pa-3" Elevation="0" Style="min-height: 200px;">
                        @if (Vm.IsPulling)
                        {
                            <MudText Typo="Typo.subtitle2" Class="mb-2">@Localizer["PULL_PROGRESS"]</MudText>
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-2" />
                            <MudPaper Class="pa-2" Style="height: 250px; overflow-y: auto; background-color: #1e1e1e; color: #d4d4d4; font-family: monospace; font-size: 12px;">
                                @foreach (var log in Vm.PullLogs)
                                {
                                    <div>@log</div>
                                }
                            </MudPaper>
                        }
                    </MudPaper>
                    
                    <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                        <MudButton Variant="Variant.Text" 
                                   OnClick="Vm.CloseDialog"
                                   Disabled="Vm.IsPulling">
                            @Localizer["CANCEL"]
                        </MudButton>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   OnClick="Vm.HandlePullImageAsync"
                                   Disabled="Vm.IsPulling || string.IsNullOrWhiteSpace(Vm.PullImageName)">
                            @(Vm.IsPulling ? Localizer["PULLING"].Value : Localizer["PULL_IMAGE"].Value)
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudTabPanel>
            
            <MudTabPanel Text="@Localizer["IMPORT_FROM_TARBALL"]" Icon="@Icons.Material.Filled.Upload">
                <MudStack Spacing="3">
                    <MudFileUpload T="IBrowserFile" 
                                   Accept=".tar,.tar.gz,.tgz"
                                   FilesChanged="Vm.OnTarballSelected"
                                   MaximumFileCount="1"
                                   Disabled="Vm.IsLoading">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       Disabled="Vm.IsLoading">
                                @Localizer["SELECT_TARBALL"]
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    
                    @if (Vm.SelectedTarball != null)
                    {
                        <MudChip T="string" 
                                 Color="Color.Info" 
                                 Icon="@Icons.Material.Filled.InsertDriveFile"
                                 OnClose="Vm.ClearTarballSelection">
                            @Vm.SelectedTarball.Name (@Vm.FormatFileSize(Vm.SelectedTarball.Size))
                        </MudChip>
                    }
                    
                    <MudPaper Class="pa-3" Elevation="0" Style="min-height: 200px;">
                        @if (Vm.IsLoading)
                        {
                                <MudText Typo="Typo.subtitle2" Class="mb-2">@Localizer["IMPORT_PROGRESS"]</MudText>
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-2" />
                            <MudPaper Class="pa-2" Style="height: 250px; overflow-y: auto; background-color: #1e1e1e; color: #d4d4d4; font-family: monospace; font-size: 12px;">
                                @foreach (var log in Vm.LoadLogs)
                                {
                                    <div>@log</div>
                                }
                            </MudPaper>
                        }
                    </MudPaper>
                    
                    <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                        <MudButton Variant="Variant.Text" 
                                   OnClick="Vm.CloseDialog"
                                   Disabled="Vm.IsLoading">
                            @Localizer["CANCEL"]
                        </MudButton>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   OnClick="Vm.HandleLoadFromTarballAsync"
                                   Disabled="Vm.IsLoading || Vm.SelectedTarball == null">
                            @(Vm.IsLoading ? Localizer["IMPORTING"].Value : Localizer["IMPORT_IMAGE"].Value)
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="Vm!.ShowInspectDialog" Options="Vm!.LargeDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-1" /> @Localizer["IMAGE_DETAILS"] - @Vm.SelectedImageName
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (string.IsNullOrEmpty(Vm.InspectJson))
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-2" />
        }
        else
        {
            <MudPaper Class="pa-2" Style="height: 500px; overflow-y: auto; background-color: #1e1e1e; color: #d4d4d4; font-family: monospace; font-size: 12px; white-space: pre;">@Vm.InspectJson</MudPaper>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Vm.CloseInspectDialog">@Localizer["CANCEL"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] private IDialogService DialogService { get; set; } = default!;

    private async Task ConfirmRemoveSelected()
    {
        if (Vm?.SelectedImageIds == null || Vm.SelectedImageIds.Count == 0)
        {
            return;
        }

        var parameters = new DialogParameters
        {
            { "ContentText", string.Format(Localizer["CONFIRM_REMOVE_SELECTED"], Vm.SelectedImageIds.Count) },
            { "ButtonText", Localizer["REMOVE"] },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<MudMessageBox>(Localizer["REMOVE_SELECTED"], parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await Vm!.RemoveSelectedImagesAsync();
        }
    }

    public void Dispose()
    {
        // Clean up resources if needed
    }
}