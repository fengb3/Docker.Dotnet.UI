@using Docker.Dotnet.UI.ViewModels
@inject ContainerExecViewModel ExecVm
@implements IDisposable

<MudStack Spacing="2">
    @if (ExecVm.HasError)
    {
        <MudAlert Severity="Severity.Error" ShowCloseIcon="true"
                  CloseIconClicked="@(() => ExecVm.ErrorMessage = null)">
            @ExecVm.ErrorMessage
        </MudAlert>
    }

    <!-- Status and Controls -->
    <MudPaper Class="pa-2" Elevation="0">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                @if (ExecVm.IsConnected)
                {
                    <MudChip T="string" Color="Color.Success" Size="Size.Small" Icon="@Icons.Material.Filled.CheckCircle">
                        @Localizer["EXEC_CONNECTED"]
                    </MudChip>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                        @ExecVm.Shell | @ExecVm.Rows Ã— @ExecVm.Cols
                    </MudText>
                }
                else if (ExecVm.IsConnecting)
                {
                    <MudChip T="string" Color="Color.Warning" Size="Size.Small" Icon="@Icons.Material.Filled.Sync">
                        @Localizer["EXEC_CONNECTING"]
                    </MudChip>
                }
                else
                {
                    <MudChip T="string" Color="Color.Error" Size="Size.Small" Icon="@Icons.Material.Filled.Cancel">
                        @Localizer["EXEC_DISCONNECTED"]
                    </MudChip>
                }
            </MudStack>
            <MudStack Row="true" Spacing="1">
                @if (ExecVm.IsConnected)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                   Color="Color.Secondary"
                                   Size="Size.Small"
                                   OnClick="@(() => ExecVm.ClearTerminal())"
                                   title='@Localizer["EXEC_CLEAR"]'/>
                    <MudIconButton Icon="@Icons.Material.Filled.Close"
                                   Color="Color.Error"
                                   Size="Size.Small"
                                   OnClick="@(() => ExecVm.CloseExecAsync())"
                                   title='@Localizer["DISCONNECT"]'/>
                }
                else if (!ExecVm.IsConnecting && !string.IsNullOrEmpty(ContainerId))
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Small"
                               StartIcon="@Icons.Material.Filled.Refresh"
                               OnClick="@(() => ExecVm.OpenExecAsync(ContainerId!, ContainerName ?? ""))">
                        @Localizer["EXEC_RECONNECT"]
                    </MudButton>
                }
            </MudStack>
        </MudStack>
    </MudPaper>

    <!-- Terminal Output -->
    <MudPaper Class="pa-3"
              Style="height: 400px; overflow-y: auto; background-color: #1e1e1e; color: #d4d4d4; font-family: 'Consolas', 'Monaco', 'Courier New', monospace; font-size: 13px; white-space: pre-wrap; word-wrap: break-word;">
        @if (ExecVm.TerminalOutput.Count == 0 && !ExecVm.IsConnecting)
        {
            <MudText Color="Color.Secondary">@Localizer["EXEC_DISCONNECTED"]</MudText>
        }
        else
        {
            @foreach (var line in ExecVm.TerminalOutput)
            {
                <text>@line</text>
            }
            @if (ExecVm.IsConnecting)
            {
                <div>@Localizer["EXEC_CONNECTING"]</div>
            }
        }
    </MudPaper>

    <!-- Input -->
    @if (ExecVm.IsConnected)
    {
        <MudTextField @bind-Value="_inputCommand"
                      Placeholder="@Localizer["TYPE_COMMAND"]"
                      Variant="Variant.Outlined"
                      Margin="Margin.Dense"
                      Immediate="true"
                      OnKeyUp="HandleKeyPress"
                      Style="font-family: 'Consolas', 'Monaco', 'Courier New', monospace;"/>
    }
</MudStack>

@code {
    [Parameter]
    public string? ContainerId { get; set; }

    [Parameter]
    public string? ContainerName { get; set; }

    [Inject]
    private IStringLocalizer Localizer { get; set; } = null!;

    private string _inputCommand = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ExecVm.OnStateChanged += StateHasChanged;
        
        if (!string.IsNullOrEmpty(ContainerId))
        {
            await ExecVm.OpenExecAsync(ContainerId, ContainerName ?? ContainerId);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_inputCommand))
        {
            await ExecVm.SendInputAsync(_inputCommand + "\n");
            _inputCommand = string.Empty;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        ExecVm.OnStateChanged -= StateHasChanged;
        _ = ExecVm.CloseExecAsync();
    }
}
